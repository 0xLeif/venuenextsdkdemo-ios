// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name VNOrderUI
import CoreData
import CoreLocation
import Foundation
import Swift
import UIKit
import VNAnalytics
import VNCore
import VNCoreUI
import VNNetworkService
import VNOrderData
import VNOrderService
@_exported import VNOrderUI
import VNPayment
import os.log
import os
@objc public class StandMenuTableViewController : UIKit.UITableViewController {
  public init(menu: VNOrderData.Menu)
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc public func reloadData()
  @objc override dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc override dynamic public init(style: UIKit.UITableView.Style)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension StandMenuTableViewController {
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension StandMenuTableViewController {
  @objc override dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc override dynamic public func scrollViewShouldScrollToTop(_ scrollView: UIKit.UIScrollView) -> Swift.Bool
}
extension StandMenuTableViewController : CoreData.NSFetchedResultsControllerDelegate {
  @objc dynamic public func controllerWillChangeContent(_ controller: CoreData.NSFetchedResultsController<CoreData.NSFetchRequestResult>)
  @objc dynamic public func controller(_ controller: CoreData.NSFetchedResultsController<CoreData.NSFetchRequestResult>, didChange anObject: Any, at indexPath: Foundation.IndexPath?, for type: CoreData.NSFetchedResultsChangeType, newIndexPath: Foundation.IndexPath?)
  @objc dynamic public func controllerDidChangeContent(_ controller: CoreData.NSFetchedResultsController<CoreData.NSFetchRequestResult>)
  @objc dynamic public func controller(_ controller: CoreData.NSFetchedResultsController<CoreData.NSFetchRequestResult>, didChange sectionInfo: CoreData.NSFetchedResultsSectionInfo, atSectionIndex sectionIndex: Swift.Int, for type: CoreData.NSFetchedResultsChangeType)
}
extension StandMenuTableViewController : VNAnalytics.PageViewTrackable {
  @objc dynamic public var pageViewName: Swift.String {
    @objc get
  }
  @objc dynamic public var pageViewTitle: Swift.String {
    @objc get
  }
}
@objc public class OrderCoordinator : ObjectiveC.NSObject, VNCoreUI.Coordinator, VNCoreUI.CustomNavigable {
  @objc public var wasStarted: Swift.Bool {
    get
    }
  @objc public var rootViewController: UIKit.UIViewController!
  @objc public var navigationController: UIKit.UINavigationController!
  public var productTypes: [VNCore.ProductType] {
    get
    set
  }
  public var childCoordinators: [VNCoreUI.Coordinator]
  public var standsTableViewController: VNOrderUI.StandsTableViewController {
    get
    set
  }
  @objc override convenience dynamic public init()
  @objc public init(navigationController: UIKit.UINavigationController? = nil, paymentProcessor: VNCore.PaymentProcessable? = nil)
  @objc public func start()
  @objc deinit
}
extension OrderCoordinator : VNOrderUI.StandsTableViewControllerDelegate {
  public func didSelect(_ menu: VNOrderData.Menu)
}
extension OrderCoordinator {
  public func didTap(_ item: VNOrderData.Item)
}
extension OrderCoordinator : VNOrderUI.StandMenuViewControllerDelegate {
  public func didSelectViewCart(for productType: VNCore.ProductType)
}
extension OrderCoordinator : VNOrderUI.CheckoutTableViewControllerDelegate {
  @objc dynamic public func onPaymentCompletion(orderSummary: VNOrderData.OrderSummary?, productType: VNCore.ProductType, error: Swift.Error?)
  @objc dynamic public func onPayNow(_ viewController: VNOrderUI.CheckoutTableViewController?, productType: VNCore.ProductType, completion: @escaping (VNCore.PaymentMethodRepresentable?, Swift.Error?) -> Swift.Void)
  @objc dynamic public func postPaymentMethod(_ paymentMethod: VNCore.PaymentMethodRepresentable, completion: @escaping ((Foundation.NSError?) -> Swift.Void))
}
extension OrderCoordinator {
  @objc dynamic public func showExperiencesMenu(for menuUUID: Swift.String)
  @objc dynamic public func pushRvCList(title: Swift.String? = nil)
  @objc dynamic public func presentMenu(for menuUUID: Swift.String, from parent: UIKit.UIViewController, completion: (() -> Swift.Void)? = nil)
  @objc dynamic public func pushMenu(for menuUUID: Swift.String)
  public func presentExperienceDetails(for presenter: UIKit.UIViewController, menuID: Swift.String, eventID: Swift.String, variantID: Swift.String, completion: ((Swift.Bool) -> Swift.Void)?)
  @objc dynamic public func dismiss()
}
public class ExperienceSelection {
  @objc deinit
}
@objc public class LineItemTableViewCell : UIKit.UITableViewCell, VNCoreUI.CellIdentifiable {
  public static var identifier: Swift.String {
    get
  }
  @objc override dynamic public func awakeFromNib()
  @objc override dynamic public func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @available(iOS 3.0, *)
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension ModifierCartEntry {
  public func lineItemDescription() -> Swift.String
  public func modifierDisplayText() -> Swift.String
}
public typealias VNOrderRoutes = VNCore.DeepLinkRoute.VNOrderRoutes
extension DeepLinkRoute {
  public enum VNOrderRoutes : Swift.String, Swift.CaseIterable {
    case qrPay
    case experienceTransfer
    case experienceDetails
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [VNCore.DeepLinkRoute.VNOrderRoutes]
    public static var allCases: [VNCore.DeepLinkRoute.VNOrderRoutes] {
      get
    }
  }
}
@objc public class RichCheckoutTableViewController : VNOrderUI.CheckoutTableViewController {
  public init(orderNumber: Swift.String, payload: Swift.String, delegate: VNOrderUI.CheckoutTableViewControllerDelegate)
  @objc override dynamic public func viewDidLoad()
  @objc public func onDismiss()
  @objc override dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  override public init(cart: VNOrderData.Cart, productType: VNCore.ProductType)
  @objc deinit
}
extension OrderCoordinator {
  public func handleExperienceSelection(_ selection: VNOrderUI.ExperienceSelection)
}
@objc final public class ExperiencesViewController : UIKit.UIViewController {
  public init(with menu: VNOrderData.Menu)
  @objc override final public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  final public var onOrderNowCallBack: ((VNOrderUI.ExperienceSelection) -> Swift.Void)?
  @objc override final public func viewDidLoad()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension ExperiencesViewController : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @objc final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc final public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @objc final public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
@objc final public class MarketplaceViewController : UIKit.UIViewController {
  final public var didSelectSegment: (Swift.Int, Swift.String) -> Swift.Void {
    get
    set
  }
  final public var segments: [Swift.String] {
    get
  }
  @objc dynamic public init()
  @objc override final public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @objc override final public func viewDidLoad()
  final public func selectSegment(_ index: Swift.Int)
  final public func addSegment(_ title: Swift.String)
  final public func clearFilters()
  final public func setChild(_ childController: UIKit.UIViewController)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
public protocol StandMenuViewControllerDelegate : AnyObject {
  func didSelectViewCart(for productType: VNCore.ProductType)
}
@objc public class StandMenuViewController : UIKit.UIViewController {
  public var standMenuTableViewController: VNOrderUI.StandMenuTableViewController {
    get
    set
  }
  public init(menu: VNOrderData.Menu)
  @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension StandMenuViewController : UIKit.UICollectionViewDataSource {
  @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension StandMenuViewController : UIKit.UICollectionViewDelegate {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
}
extension StandMenuViewController : VNAnalytics.PageViewTrackable {
  @objc dynamic public var pageViewName: Swift.String {
    @objc get
  }
  @objc dynamic public var pageViewTitle: Swift.String {
    @objc get
  }
}
extension StandMenuViewController : CoreData.NSFetchedResultsControllerDelegate {
  @objc dynamic public func controllerDidChangeContent(_ controller: CoreData.NSFetchedResultsController<CoreData.NSFetchRequestResult>)
}
extension UINavigationController {
  @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
}
@objc public class ReceiptCoordinator : ObjectiveC.NSObject, VNCoreUI.Coordinator, VNCoreUI.CustomNavigable {
  public var navigationController: UIKit.UINavigationController!
  public var childCoordinators: [VNCoreUI.Coordinator]
  weak public var parentCoordinator: VNCoreUI.Coordinator?
  public init(orderSummary: VNOrderData.OrderSummary, presenter: UIKit.UIViewController, productType: VNCore.ProductType)
  public init(orderUUID: Swift.String, for productType: VNCore.ProductType, presenter: UIKit.UIViewController, completion: @escaping (Swift.Bool) -> Swift.Void)
  public func start()
  @objc override dynamic public init()
  @objc deinit
}
@objc public class StandTableViewCell : UIKit.UITableViewCell, VNCoreUI.CellIdentifiable, VNCoreUI.Registerable {
  public static var identifier: Swift.String {
    get
  }
  @objc @IBOutlet weak public var nameLabel: UIKit.UILabel!
  @objc @IBOutlet weak public var standImageView: UIKit.UIImageView!
  @objc @IBOutlet weak public var detailLabel: UIKit.UILabel!
  @objc override dynamic public func awakeFromNib()
  @available(iOS 3.0, *)
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension VNOrder : VNCore.VNDeepLinkable {
  public func route<T>(for url: Foundation.URL) -> T? where T : Swift.RawRepresentable, T.RawValue == Swift.String
  public func canHandle(url: Foundation.URL) -> Swift.Bool
  public func handle(url: Foundation.URL, presenter: UIKit.UIViewController, completion: ((Swift.Bool) -> Swift.Void)?)
}
public protocol StandsTableViewControllerDelegate : AnyObject {
  func didSelect(_ menu: VNOrderData.Menu)
}
@objc public class StandsTableViewController : UIKit.UITableViewController, VNCoreUI.Alerting {
  weak public var delegate: VNOrderUI.StandsTableViewControllerDelegate?
  public var productTypes: [VNCore.ProductType] {
    get
    }
  @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public init(style: UIKit.UITableView.Style)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension StandsTableViewController {
  @objc override dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension StandsTableViewController {
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
extension StandsTableViewController : CoreData.NSFetchedResultsControllerDelegate {
  @objc dynamic public func controllerWillChangeContent(_ controller: CoreData.NSFetchedResultsController<CoreData.NSFetchRequestResult>)
  @objc dynamic public func controller(_ controller: CoreData.NSFetchedResultsController<CoreData.NSFetchRequestResult>, didChange anObject: Any, at indexPath: Foundation.IndexPath?, for type: CoreData.NSFetchedResultsChangeType, newIndexPath: Foundation.IndexPath?)
  @objc dynamic public func controllerDidChangeContent(_ controller: CoreData.NSFetchedResultsController<CoreData.NSFetchRequestResult>)
  @objc dynamic public func controller(_ controller: CoreData.NSFetchedResultsController<CoreData.NSFetchRequestResult>, didChange sectionInfo: CoreData.NSFetchedResultsSectionInfo, atSectionIndex sectionIndex: Swift.Int, for type: CoreData.NSFetchedResultsChangeType)
}
extension StandsTableViewController : VNAnalytics.PageViewTrackable {
  @objc dynamic public var pageViewName: Swift.String {
    @objc get
  }
  @objc dynamic public var pageViewTitle: Swift.String {
    @objc get
  }
}
@objc public class OrderHistoryViewController : UIKit.UIViewController {
  @objc dynamic public init()
  @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension OrderHistoryViewController : UIKit.UITableViewDataSource {
  @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension OrderHistoryViewController : UIKit.UITableViewDelegate {
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreGraphics.CGFloat
}
extension OrderHistoryViewController : VNAnalytics.PageViewTrackable {
  @objc dynamic public var pageViewName: Swift.String {
    @objc get
  }
  @objc dynamic public var pageViewTitle: Swift.String {
    @objc get
  }
}
public protocol BottomSheetViewControllerDelegate : VNCoreUI.HeaderTextTableViewCellDelegate, VNCoreUI.PrimaryActionTableViewCellDelegate, VNCoreUI.SinglePickerSelectorTableViewCellDelegate, VNCoreUI.SubtitleTableViewCellDelegate {
  func shouldDismiss(controller: VNOrderUI.BottomSheetViewController) -> Swift.Bool
  func didDismiss(controller: VNOrderUI.BottomSheetViewController)
}
@objc public class BottomSheetViewController : UIKit.UIViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension BottomSheetViewController : UIKit.UITableViewDataSource {
  @objc dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
@objc public class TimerCard : UIKit.UIView {
  public static let recommendedSize: CoreGraphics.CGSize
  public var seconds: Foundation.TimeInterval {
    get
    }
  public var timerFinished: (() -> Swift.Void)?
  public var onDismiss: (() -> Swift.Void)?
  @objc override dynamic public var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  convenience public init(seconds: Foundation.TimeInterval = 60, backgroundColor: UIKit.UIColor = theme.primaryDark)
  convenience public init(seconds: Foundation.TimeInterval = 60, backgroundImage: UIKit.UIImage)
  @objc override dynamic public func awakeFromNib()
  @objc public func dismiss()
  public func startTimer(_ startDate: Foundation.Date = Date())
  @objc deinit
}
public class MetadataManager {
  public struct MetadataGroup : Swift.Hashable {
    public typealias Element = VNOrderUI.MetadataManager.MetadataType
    public var elements: [VNOrderUI.MetadataManager.MetadataGroup.Element] {
      get
      }
    public let experienceSelection: VNOrderUI.ExperienceSelection
    public var store: [VNOrderUI.MetadataManager.MetadataType : Any] {
      get
      }
    public init(experienceSelection: VNOrderUI.ExperienceSelection, types: [VNOrderUI.MetadataManager.MetadataGroup.Element] = [])
    mutating public func append(_ type: VNOrderUI.MetadataManager.MetadataGroup.Element)
    @discardableResult
    mutating public func remove(_ type: VNOrderUI.MetadataManager.MetadataGroup.Element) throws -> VNOrderUI.MetadataManager.MetadataGroup.Element?
    public subscript(index: Swift.Int) -> VNOrderUI.MetadataManager.MetadataGroup.Element {
      get
    }
    public func contains(type: VNOrderUI.MetadataManager.MetadataGroup.Element) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (lhs: VNOrderUI.MetadataManager.MetadataGroup, rhs: VNOrderUI.MetadataManager.MetadataGroup) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum MetadataType : Swift.Hashable {
    public enum Options : Swift.Hashable {
      case placeholder(text: Swift.String)
      case minimumAge(age: Swift.Int64)
      case maximumAge(age: Swift.Int64)
      case between(minAge: Swift.Int64, maxAge: Swift.Int64)
      case errorMessage(text: Swift.String)
      public var hashValue: Swift.Int {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
      public static func == (a: VNOrderUI.MetadataManager.MetadataType.Options, b: VNOrderUI.MetadataManager.MetadataType.Options) -> Swift.Bool
    }
    case text(identifier: Swift.String, options: Swift.Set<VNOrderUI.MetadataManager.MetadataType.Options>)
    case seat(identifier: Swift.String, options: Swift.Set<VNOrderUI.MetadataManager.MetadataType.Options>)
    case date(identifier: Swift.String, options: Swift.Set<VNOrderUI.MetadataManager.MetadataType.Options>)
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: VNOrderUI.MetadataManager.MetadataType, b: VNOrderUI.MetadataManager.MetadataType) -> Swift.Bool
  }
  @objc deinit
}
extension UIColor {
  public func image(_ size: CoreGraphics.CGSize = CGSize(width: 1, height: 1)) -> UIKit.UIImage
}
extension UIColor {
  public func toColor(_ color: UIKit.UIColor, percentage: CoreGraphics.CGFloat) -> UIKit.UIColor
}
@objc public class VNOrder : ObjectiveC.NSObject {
  @objc public static let shared: VNOrderUI.VNOrder
  @objc override dynamic public init()
  @objc deinit
}
extension VNOrder : VNCore.VNOrderProtocol {
  @objc dynamic public func enableWallet(wallet: Any)
}
extension UIViewController {
  public struct AssociatedKeys {
  }
  public var preferredNavigationBarBackground: UIKit.UIColor? {
    get
    set
  }
  public var preferredNavigationBarTintColor: UIKit.UIColor? {
    get
    set
  }
  public func setNavigationBarAppearance(navigationController: UIKit.UINavigationController?)
}
@objc public protocol CheckoutTableViewControllerDelegate : AnyObject {
  @objc func onPayNow(_ viewController: VNOrderUI.CheckoutTableViewController?, productType: VNCore.ProductType, completion: @escaping (VNCore.PaymentMethodRepresentable?, Swift.Error?) -> Swift.Void)
  @objc func onPaymentCompletion(orderSummary: VNOrderData.OrderSummary?, productType: VNCore.ProductType, error: Swift.Error?)
  @objc func postPaymentMethod(_ paymentMethod: VNCore.PaymentMethodRepresentable, completion: @escaping ((Foundation.NSError?) -> Swift.Void))
}
@objc public class CheckoutTableViewController : UIKit.UITableViewController, VNCoreUI.Alerting {
  @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  public init(cart: VNOrderData.Cart, productType: VNCore.ProductType)
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc override dynamic public init(style: UIKit.UITableView.Style)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension CheckoutTableViewController : CoreData.NSFetchedResultsControllerDelegate {
  @objc dynamic public func controllerDidChangeContent(_ controller: CoreData.NSFetchedResultsController<CoreData.NSFetchRequestResult>)
}
extension CheckoutTableViewController : VNAnalytics.PageViewTrackable {
  @objc dynamic public var pageViewName: Swift.String {
    @objc get
  }
  @objc dynamic public var pageViewTitle: Swift.String {
    @objc get
  }
}
extension CheckoutTableViewController : VNCoreUI.RoundedTextFieldViewDelegate {
  @objc dynamic public func didFinishEditing(text: Swift.String, textField: UIKit.UITextField)
  @objc dynamic public func didChangeText(text: Swift.String, textField: UIKit.UITextField)
}
@objc public class MetadataViewController : UIKit.UIViewController {
  public typealias ValidatableViewController = UIKit.UIViewController & VNCore.Validatable
  public var didCancel: () -> Swift.Void
  public var didFinish: ([VNOrderUI.MetadataManager.MetadataType : Any]) -> Swift.Void
  @objc dynamic public init()
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  public func add(_ group: VNOrderUI.MetadataManager.MetadataGroup)
  public func add(_ groups: [VNOrderUI.MetadataManager.MetadataGroup])
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension MetadataViewController : UIKit.UIPageViewControllerDelegate, UIKit.UIPageViewControllerDataSource {
  @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerBefore viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerAfter viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @objc dynamic public func presentationCount(for pageViewController: UIKit.UIPageViewController) -> Swift.Int
  @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, didFinishAnimating finished: Swift.Bool, previousViewControllers: [UIKit.UIViewController], transitionCompleted completed: Swift.Bool)
}
@objc public class OrderHistoryCoordinator : ObjectiveC.NSObject, VNCoreUI.Coordinator, VNCoreUI.CustomNavigable {
  @objc public var navigationController: UIKit.UINavigationController!
  public var childCoordinators: [VNCoreUI.Coordinator]
  @objc public init(navigationController: UIKit.UINavigationController?, paymentProcessor: VNCore.PaymentProcessable? = nil)
  @objc public func start()
  @objc public func pushViewController()
  @objc public func present(from presenter: UIKit.UIViewController, completion: (() -> Swift.Void)? = nil)
  @objc public static func presentReceipt(from presenter: UIKit.UIViewController, experiences: [VNOrderData.ExperienceItem], completion: (() -> Swift.Void)? = nil)
  @objc public func dismiss()
  @objc override dynamic public init()
  @objc deinit
}
extension OrderHistoryCoordinator : VNOrderUI.CheckoutTableViewControllerDelegate {
  @objc dynamic public func onPaymentCompletion(orderSummary: VNOrderData.OrderSummary?, productType: VNCore.ProductType, error: Swift.Error?)
  @objc dynamic public func onPayNow(_ viewController: VNOrderUI.CheckoutTableViewController?, productType: VNCore.ProductType, completion: @escaping (VNCore.PaymentMethodRepresentable?, Swift.Error?) -> Swift.Void)
  @objc dynamic public func postPaymentMethod(_ paymentMethod: VNCore.PaymentMethodRepresentable, completion: @escaping ((Foundation.NSError?) -> Swift.Void))
}
public class MenuItemDetailViewModel {
  public init(for item: VNOrderData.Item, cart: VNOrderData.Cart)
  @objc deinit
}
public protocol ExperienceTransferViewControllerDelegate : AnyObject {
  func didFinishTransfer()
}
@objc public class ExperienceCard : UIKit.UIView {
  public enum RedemptionStatus {
    case soon
    case now
    case redeemed
    case expired
    case none
    case refunded
    case cancel
    case transferred
    public static func == (a: VNOrderUI.ExperienceCard.RedemptionStatus, b: VNOrderUI.ExperienceCard.RedemptionStatus) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var actionHandler: () -> Swift.Void
  public var redemptionStatus: VNOrderUI.ExperienceCard.RedemptionStatus {
    get
    set
  }
  public static let recommendedSize: CoreGraphics.CGSize
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc convenience dynamic public init()
  public init(center: CoreGraphics.CGPoint)
  @objc override dynamic public func awakeFromNib()
  public func updateToTimer(startDate: Foundation.Date? = nil, seconds: Foundation.TimeInterval, backgroundImage: UIKit.UIImage? = nil, finished: @escaping (VNOrderUI.TimerCard?) -> Swift.Void)
  public func downgradeFromTimer()
  public func resetCard()
  @objc deinit
}
open class MenuItemInteraction : VNAnalytics.AnalyticsEvent {
  @objc override open var metadata: [Swift.String : Any]? {
    @objc get
  }
  public init(with item: VNOrderData.Item, from screen: VNAnalytics.PageViewTrackable? = nil)
  @objc override dynamic public init()
  @objc deinit
}
open class AddItemEvent : VNOrderUI.MenuItemInteraction {
  @objc override open var eventName: Swift.String {
    @objc get
  }
  override public init(with item: VNOrderData.Item, from screen: VNAnalytics.PageViewTrackable? = super)
  @objc deinit
}
open class ItemDetailEvent : VNOrderUI.MenuItemInteraction {
  @objc override open var eventName: Swift.String {
    @objc get
  }
  override public init(with item: VNOrderData.Item, from screen: VNAnalytics.PageViewTrackable? = super)
  @objc deinit
}
open class PaymentTypeEvent : VNAnalytics.AnalyticsEvent {
  @objc override open var eventName: Swift.String {
    @objc get
  }
  @objc override open var metadata: [Swift.String : Any]? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
open class OrderStatusEvent : VNAnalytics.AnalyticsEvent {
  @objc override open var eventName: Swift.String {
    @objc get
  }
  @objc override open var metadata: [Swift.String : Any]? {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension VNCore.DeepLinkRoute.VNOrderRoutes : Swift.Equatable {}
extension VNCore.DeepLinkRoute.VNOrderRoutes : Swift.Hashable {}
extension VNCore.DeepLinkRoute.VNOrderRoutes : Swift.RawRepresentable {}
extension VNOrderUI.ExperienceCard.RedemptionStatus : Swift.Equatable {}
extension VNOrderUI.ExperienceCard.RedemptionStatus : Swift.Hashable {}
